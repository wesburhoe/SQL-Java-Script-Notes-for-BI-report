#5:--BirtStr.right(dataSetRow["reserved_for"],BirtStr.indexOf("/",dataSetRow["reserved_for"],1));
String value = dataSetRow["reserved_for"];
    // Loop through characters in this String.
    for (int i = 0; i < value.length(); i++) {
        char c = value.charAt(i);

        // See if the character is a letter or not.
        if (Character.isLetter(c)) {
        (c);
        } 
        if (Character.isDigit(c)) {
        BAN=str.matches("\\d");
        }

        if ((""+c).matches("\\p{M}"))
            System.out.println("This " + c + " = UNICODE LETTER");
    }
######################################
Expression Builder: 
var BAN = dataSetRow["reserved_for"];
if (BirtStr.search(BAN,"*[0-9][0-9][0-9][0-9]*")>0)
{ 
var index= BAN.indexOf("*[0-9][0-9][0-9][0-9]*");
var index1= BAN.indexOf("AIP");
var index2= BAN.indexOf("BAN");
var index3= BAN.indexOf("CUS");
//if (BirtComp.match(BAN,"*[0-9][0-9][0-9][0-9]*")) 	{" ";}
if (index > 0){
BAN = BAN.substring(index,index+6);
}
else if (index1 > 0){
BAN = BAN.substring(index1+4,index1+11);
}
else if (index2 > 0){
BAN = BAN.substring(index2+4,index2+11);
}
else if (index3 > 0){
BAN = BAN.substring(index3+4,index3+11);}
}
" ";

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
var consumerName = dataSetRow["RIGHT_POWERCONSUMER"];
if (consumerName)
{
var index= consumerName.indexOf("/");
if (index > 0){
consumerName = consumerName.substring(0,index);
}
}
consumerName;
++++++++++++++++++++++++++++++++++++++++++++++++++
if (dataSetRow["RIGHT_RACK_OR_CAGE"] != null){
	dataSetRow["RIGHT_RACK_OR_CAGE"];
} else {
	dataSetRow["RIGHT_POWERCONSUMER"];
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
var SXWRoom  = dataSetRow["PDE_LOCATION"];
if (SXWRoom)
{
var index= SXWRoom.indexOf("/") +1;
if (index > 0){
SXWRoom = SXWRoom.substring(index);
//SXWRoom =BirtStr.left(SXWRoom,index)
}
}
SXWRoom;
6^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

if ( params["RoomsList"].value != null )
{
	this.queryText = this.queryText.replace("-- 'zzz'", "and ci_room_label in ('" + params["RoomsList"].value.join("','") + "')");
}
else
{
	this.queryText = this.queryText.replace("-- 'zzz'","");
}

if ( params["CustomerList"].value != null )
{
	this.queryText = this.queryText.replace("-- 'yyy'","where customer_name in ('" + params["CustomerList"].value.join("','") + "');");
}
else
{
	this.queryText = this.queryText.replace("-- 'yyy'",";");
}

# panel Schedule data set
initialize:
function setPhaseCellColors(columnValue, style) {
	var phaseColorParam = null;
	if (columnValue.indexOf("L1") > -1){
 		phaseColorParam = "colorPickerL1";
	} else if (columnValue.indexOf("L2") > -1){
		phaseColorParam = "colorPickerL2";
	} else if (columnValue.indexOf("L3") > -1){
		phaseColorParam = "colorPickerL3";
	}
	if (phaseColorParam != null) {
		var phaseColor = reportContext.getParameterValue(phaseColorParam);
		style.setBackgroundColor(phaseColor);
		style.setColor(getTextColorForBackground(phaseColor));
	}
}

function getTextColorForBackground(backgroundColorHex) {
	if (backgroundColorHex != null) {
	    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(backgroundColorHex);
	    var r = parseInt(result[1], 16);
	    var g = parseInt(result[2], 16);
	    var b = parseInt(result[3], 16);
	    
	    return (r * 0.299 + g * 0.587 + b * 0.114) < 186 ? 'white' : 'black';
    }
    return 'black';
}
---------------------------
Display name key: panelSchedule.report.heading

____________________
if ("amps".equals(params["breakerRadioGroup"].value) ){
	dataSetRow["LEFT_BREAKERNAME"];
} else {
	if (dataSetRow["LEFT_RECEPTACLE_TYPE"] != null){
		dataSetRow["LEFT_RECEPTACLE_TYPE"];
	} else {
		dataSetRow["LEFT_BREAKERNAME"];
	}
}
++++++++++++++++++++++++++++++++++++++++++
if (dataSetRow["LEFT_RACK_OR_CAGE"] != null){
	dataSetRow["LEFT_RACK_OR_CAGE"];
} else {
	dataSetRow["LEFT_POWERCONSUMER"];
}
---------------------------"usedPoles" Function: SUM (data type:float)- Aggregate On Group: Panel_key
var count=0;
if ( row["LEFT_BREAKERNAME"] != null )
{
    count+=1;
}
if ( row["RIGHT_BREAKERNAME"] != null )
{
    count+=1;
}
result=count;
------------------------------------TotalNumberofPoles Function: MAX (data type: Decimal)- Aggregate On Group: Panel_key
if ( dataSetRow["RIGHT_CIRCUITNO"] != null )
{
    result=dataSetRow["RIGHT_CIRCUITNO"];
}
else
{
   result=dataSetRow["LEFT_CIRCUITNO"];
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Total-A Function SUM (Data type: Float) Aggredate On: PANEL_KEY 
dataSetRow["LEFT_MEASUREMENT_AMPS"]+dataSetRow["RIGHT_MEASUREMENT_AMPS"]
$$$$$$$$$$$$$$$$$$$$$$$$$$$RIGHT_POWERCONSUMER string : var consumerName = dataSetRow["RIGHT_POWERCONSUMER"];
if (consumerName)
{
var index= consumerName.indexOf("/");
if (index > 0){
consumerName = consumerName.substring(0,index);
}
}
consumerName;
++++++++++++++++
var consumerName  = dataSetRow["LEFT_POWERCONSUMER"];
if (consumerName)
{
var index= consumerName.indexOf("/");
if (index > 0){
consumerName = consumerName.substring(0,index);
}
}
consumerName;
----------------IMAGE ITEM: Enter resources file: 
if(  BirtComp.match (row._outer["LEFT_OCCUPATION_INDICATOR"] , "SINGLE")){
this.file = "resources/panelSchedule/single.png"
}else if( BirtComp.match (row._outer["LEFT_OCCUPATION_INDICATOR"] , "TOP")){
this.file = "resources/panelSchedule/top.png"
}else if( BirtComp.match (row._outer["LEFT_OCCUPATION_INDICATOR"] , "MIDDLE")){
this.file = "resources/panelSchedule/middle.png"
}else if(  BirtComp.match (row._outer["LEFT_OCCUPATION_INDICATOR"] , "BOTTOM")){
this.file = "resources/panelSchedule/bottom.png"
}else {
this.file ="resources/panelSchedule/remove.png"
}
TABLE FILTER ####################################################
if (( row["Breaker-Watts-Left"] != null ) || (row["Breaker-Amps-Left"] != null) || (row["Breaker-Watts-Right"] != null) || (row["Breaker-Amps-Right"] != null))
{
    if ( row["LEFT_BREAKERNAME"] == null )
    {
        if ((row["Breaker-Watts-Left"]  != null ) && (row["Breaker-Watts-Left"] > 0.0 ))
        {
          true;
        }
        else
        {
            if ((row["Breaker-Amps-Left"]  != null ) && (row["Breaker-Amps-Left"] > 0.0 ))
            {
                true;
             }
            else false;
        }
     }   
    else
    {
       if ( row["RIGHT_BREAKERNAME"] == null )
      {
           if ((row["Breaker-Watts-Right"]  != null ) && (row["Breaker-Watts-Right"] > 0.0 ))
           {
              true;
           }
           else
          {
              if ((row["Breaker-Amps-Right"]  != null ) && (row["Breaker-Amps-Right"] > 0.0 ))
              {
                  true;
               }
              else false;
           }
       }
    }
} else false;
$$$$$$$$$$$$$$$$$$$$$$$$$$
LEFT Breaker Filter:

if (( row["Breaker-Watts-Left"] != null ) || (row["Breaker-Amps-Left"] != null))
{
    if ( row["LEFT_BREAKERNAME"] == null )
    {
        if (row["Breaker-Watts-Left"] > 0.0 )
        {
          true;
        }
        else
        {
            if  (row["Breaker-Amps-Left"] > 0.0 )
            {
                true;
             }
            else false;
        }
     }          
} else false;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

if (( row["Breaker-Watts-Right"] != null ) || (row["Breaker-Amps-Right"] != null))
{
    if ( row["RIGHT_BREAKERNAME"] == null )
    {
        if (row["Breaker-Watts-Right"] > 0.0 )
        {
          true;
        }
        else
        {
            if  (row["Breaker-Amps-Right"] > 0.0 )
            {
                true;
             }
            else false;
        }
     }          
} else false;

   
    &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

       
    
